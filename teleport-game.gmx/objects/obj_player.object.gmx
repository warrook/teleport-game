<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Variables
grav = 0.2; //"Gravity"
hsp = 0; //Horizontal speed
hsp_target = 0; //Target h. speed
difHsp = 0; //hsp_target - hsp
vsp = 0; //Vertical speed
hdir = 0; //Horizontal direction
vdir = 0; //Vertical direction
frc = 0; //Friction
deltahsp = 0;
deltavsp = 0;
vspbuffer = 0;

highesty = room_height;
prev_highesty = room_height;

//Multi State
movespeed = 3;

//Normal State
jumpspeed = 5.5;
jumped = false; //True if player jumps off ground
jumps = 0; //Counter for airborne velocity inversions (double jumps) done
jumpsmax = 1; //Cap for double jumps

//Dash State
dashspeed = 3;
dashing = 0; //Counter for dashing
dashCD = 0; //Timer until dashing can be performed again (i could probably use an alarm)
leftCD = 0;
rightCD = 0;

//Teleportation
enabletp = true; //If true, player can attempt a teleport
teleporting = false; //True if the player is starting a teleport
teleported = false; //True is player successfully teleports
teleportCD = 0; //Timer until teleport can be done again
targetx = 0;
targety = 0;
closest_d = 0;
closest_x = 0;
closest_y = 0;


notele = 0;

//Flags
inAir = 0;
toggle = 0; //debug info; see scr_getInputs()

state = state.normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state)
{
    case state.normal:
        scr_p_state_normal();
        break;
    case state.dash:
        scr_p_state_dash();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_colour(c_green);
draw_roundrect(x-size/2,y-size,x+size/2,y+size,false);
draw_set_color(c_black);
draw_set_circle_precision(4);
draw_circle(x,y,16,false);

draw_set_color(c_black);
draw_text(32,32,string(vspeed));
draw_text(32,48,string(hspeed));*/

draw_self();

if (toggle)
{
    draw_set_color(c_black);
    draw_text
    (
        64,
        32,
        "fps: " + string(fps)
        + "#state: " + string(state)
        + "#mouse x: " + string(mouse_x)
        + "#mouse y: " + string(mouse_y)
        + "#targetx: " + string(targetx)
        + "#targety: " + string(targety)
        //+ "#over block? " + string(1-place_free(mouse_x,mouse_y)) //If the player sprite was placed there, yo!
        + "#closest_d: " + string(closest_d)
        + "#closest_x: " + string(closest_x)
        + "#closest_y: " + string(closest_y)
        + "#place free: " + string(place_free(x,y+1))
        + "#hsp: " + string(hsp)
        //+ "#hsp calc: " + string(movespeed) + " * " + string(key_right - key_left)
        //+ "#hsp_target: " + string(hsp_target)
        //+ "#difHsp: " + string(difHsp)
        + "#vsp: " + string(vsp)
        /*+ "#dashing: " + string(dashing)
        + "#dashCD: " + string(dashCD)
        + "#dash alarm lft: " + string(leftCD)
        + "#dash alarm rgt: " + string(rightCD)
        + "#dash alarm up: " + string(jumpCD)
        + "#rmb down: " + string(mouse_right)
        + "#rmb pressed: " + string(mouse_right_pressed)*/
        + "#deltahsp: " + string(deltahsp) 
        + "#deltavsp: " + string(deltavsp) 
        + "#jumps: " + string(jumps)
        + "#inAir:" + string(inAir)
        + "#x: " + string(x)
        + "#y: " + string(y)
        + "#high y1: " + string(768-prev_highesty)
        + "#high y2: " + string(768-highesty)
        //+ "#vspbuffer: " + string(vspbuffer)
        + "#jumped: " + string(jumped)
        + "#mouse over solid?: " + string(scr_checkSolid(mouse_x,mouse_y))
        + "#noteleport: " + string(notele)
    );
    draw_sprite(testscr_notele(),0,targetx,targety);
    draw_point_colour(targetx,targety,c_aqua);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
